Implementing Dynamic Navigation in VToolbar.vue
Here's how you can implement dynamic navigation in VToolbar.vue based on user roles or permissions:

1. Fetch User Data:

Add a function to fetch user data from Firebase, including their roles or permissions.
This function can be called in the onMounted lifecycle hook or when the user logs in.
const fetchUserData = async () => {
  const user = firebase.auth().currentUser;
  if (user) {
    const docRef = doc(db, 'users', user.uid);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      const userData = docSnap.data();
      // Store user data in a reactive variable
      user.value = userData;
    } else {
      console.error('User data not found');
    }
  }
};

2. Filter Navigation Items:

Create a computed property that filters the navItems array based on the user's roles or permissions.
This computed property can use the user.value to determine which items to display.
const filteredNavItems = computed(() => {
  if (user.value) {
    return navItems.filter((item) => {
      // Check if the user has the required permission for the item
      return user.value.roles.includes(item.permission);
    });
  } else {
    return [];
  }
});

3. Update Navigation List:

Use the filteredNavItems computed property to dynamically update the navigation list in the template.
This ensures that only authorized items are displayed to the user.
<v-list v-model:opened="open" nav class="navigation-drawer-list">
  <v-list-item
    v-for="(item, i) in filteredNavItems"
    :key="i"
    :value="item.value"
    :title="item.title"
    class="item"
    nav
    @click="openDialog(item.value)"
  >
    <template v-slot:prepend>
      <v-icon :icon="item.icon" :color="item.color" class="icon"></v-icon>
    </template>
  </v-list-item>
</v-list>

Additional Considerations:

You may need to adjust the logic for filtering navigation items based on your specific requirements.
Consider using a dedicated access control system for managing user roles and permissions.
Ensure that the user data is fetched securely and that sensitive information is not exposed.
By implementing these changes, you can create a dynamic navigation system that adapts to the user's roles or permissions, providing a more personalized and secure experience.
